// Copyright (c) 2015 Intel Corporation. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

namespace scene_perception {
  dictionary CheckingEvent {
    double quality;
  };

  enum Accuracy {
    high,
    med,
    low,
    failed
  };

  enum VoxelResolution {
    low,
    med,
    high
  };

  enum MeshingResolution {
    low,
    med,
    high
  };

  dictionary MeshingThresholds {
    double max;
    double avg;
  };

  dictionary CaptureSize {
    long width;
    long height;
  };

  dictionary InitialConfiguration {
    boolean? useOpenCVCoordinateSystem;
    VoxelResolution? voxelResolution;
    double[]? initialCameraPose;
    MeshingThresholds? meshingThresholds;
    CaptureSize? colorCaptureSize;
    CaptureSize? depthCaptureSize;
    long? captureFramerate;
  };

  dictionary MeshingUpdateInfo {
    boolean countOfBlockMeshesRequired;
    boolean blockMeshesRequired;
    boolean countOfVeticesRequired;
    boolean verticesRequired;
    boolean countOfFacesRequired;
    boolean facesRequired;
    boolean colorsRequired;
  };

  dictionary MeshingUpdateConfigs {
    boolean? bFillHoles;
    MeshingUpdateInfo? updateInfo;
  };

  dictionary Image {
    long width;
    long height;
    long[] data;
  };

  dictionary Sample {
    Image color;
    Image depth;
  };

  dictionary SampleProcessedEvent {
    double quality;
    Accuracy accuracy;
    double[] cameraPose;
  };

  dictionary VerticesOrNormals {
    long width;
    long height;
    double[] data;
  };

  dictionary BlockMesh {
    long meshId;
    long vertexStartIndex;
    long numVertices;
    long faceStartIndex;
    long numFaces;
  };

  dictionary MeshData {
    BlockMesh[] blockMeshes;
    long numberOfVertices;
    double[] vertices;
    long[] colors;
    long numberOfFaces;
    long[] faces;
  };

  dictionary SaveMeshInfo {
    boolean? fillMeshHoles;
    boolean? saveMeshColor;
    MeshingResolution? meshResolution;
  };

  dictionary Point3D {
    double x;
    double y;
    double z;
  };

  dictionary InterestRegion {
    Point3D lowerLeftFrontPoint;
    Point3D upperRightRearPoint;
  };

  dictionary VoxelsDataConfig {
    long voxelCount;
    boolean useColor;
  };

  dictionary SurfaceVoxelsData {
    double[] centerOfSurfaceVoxels;
    long numberOfSurfaceVoxels;
    long[] surfaceVoxelsColor;
    boolean dataPending;
  };

  dictionary ErrorEvent {
    DOMString status;
  };

  callback Promise = void (DOMString success, DOMString error);
  callback SamplePromise = void (Sample sample, DOMString error);
  callback ImagePromise = void (Image image, DOMString error);
  callback VerticesPromise = void (VerticesOrNormals vertices, DOMString error);
  callback NormalsPromise = void (VerticesOrNormals normals, DOMString error);
  callback BoolPromise = void (boolean boolValue, DOMString error);
  callback MeshingThresholdsPromise = void (MeshingThresholds mThresholds, DOMString error);
  callback MeshDataPromise = void (MeshData meshes, DOMString error);
  callback VoxelResolutionPromise = void (VoxelResolution resolution, DOMString error);
  callback MeshingResolutionPromise = void (MeshingResolution resolution, DOMString error);
  callback DoublePromise = void (double voxelSize, DOMString error);
  callback ArrayBufferPromise = void(ArrayBuffer buffer, DOMString error);
  callback SurfaceVoxelsDataPromise = void(SurfaceVoxelsData data, DOMString error);

  interface Events {
    static void onchecking();
    static void onsampleprocessed();
    static void onmeshupdated();
    static void onerror();
  };

  interface Functions {
    /** Tasks in start:
      * 1. configure the session and SP process
      * 2. init the pipeline
      */
    static void init(optional InitialConfiguration config, Promise promise);
    static void start(Promise promise);
    static void stop(Promise promise);
    static void reset(Promise promise);
    static void destory(Promise promise);

    // setters
    static void enableReconstruction(boolean enable, Promise promise);
    static void enableRelocalization(boolean enable, Promise promise);
    static void setMeshingResolution(MeshingResolution mResolution, Promise promise);
    static void setMeshingThresholds(MeshingThresholds mThresholds, Promise promise);
    static void setCameraPose(double[] pose, Promise promise);
    static void setMeshingUpdateConfigs(MeshingUpdateConfigs config, Promise promise);
    static void configureSurfaceVoxelsData(VoxelsDataConfig config, Promise promise);
    static void setMeshingRegion(InterestRegion region, Promise promise);

    // getters
    static void getSample(SamplePromise promise);
    static void getVertices(VerticesPromise vertices);
    static void getNormals(NormalsPromise normals);
    static void getVolumePreview(double[] pose, ImagePromise promise);
    static void isReconstructionEnabled(BoolPromise promise);
    static void getVoxelResolution(VoxelResolutionPromise promise);
    static void getVoxelSize(DoublePromise promise);
    static void getMeshingThresholds(MeshingThresholdsPromise promise);
    static void getMeshingResolution(MeshingResolutionPromise promise);
    static void getMeshData(MeshDataPromise promise);
    static void getSurfaceVoxels(optional InterestRegion region, SurfaceVoxelsDataPromise promise);

    static void saveMesh(optional SaveMeshInfo info, ArrayBufferPromise promise);
    static void clearMeshingRegion(Promise promise);

    [nodoc] static ScenePerception scenePerceptionConstructor(DOMString objectId);
  };
};
