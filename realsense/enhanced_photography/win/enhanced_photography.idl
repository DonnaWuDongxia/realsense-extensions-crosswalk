// Copyright (c) 2015 Intel Corporation. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// EnhancedPhotography API
namespace enhanced_photography {
  dictionary Distance {
    double distance;
  };

  dictionary ErrorEvent {
    DOMString status;
  };

  dictionary Point {
    long x;
    long y;
  };

  dictionary Size {
    long width;
    long height;
  };

  dictionary Motion {
    double horizontal;
    double vertical;
    double distance;
  };

  dictionary Rotation {
    double pitch;
    double yaw;
    double roll;
  };

  enum DepthFillQuality {
    high,
    low
  };

  dictionary PreviewConfiguration {
    long? colorWidth;
    long? colorHeight;
    long? depthWidth;
    long? depthHeight;
    double? framerate;
  };

  callback DistancePromise = void(Distance distance, DOMString error);
  callback ImagePromise = void(depth_photo.Image image, DOMString error);
  callback MaskImagePromise = void(depth_photo.MaskImage image, DOMString error);
  callback PhotoPromise = void(depth_photo.Photo photo, DOMString error);
  callback ArrayBufferPromise = void(ArrayBuffer buffer, DOMString error);
  callback Promise = void(DOMString success, DOMString error);

  interface Events {
    static void onerror();
    static void onpreview();
  };

  interface Functions {
    static void startPreview(optional PreviewConfiguration config, Promise promise);
    static void stopPreview(Promise promise);
    static void getPreviewImage(ImagePromise promise);
    static void takePhoto(PhotoPromise promise);
    static void measureDistance(depth_photo.Photo photo, Point start, Point end, DistancePromise promise);
    static void depthRefocus(depth_photo.Photo photo, Point focus, double aperture, PhotoPromise promise);
    static void depthResize(depth_photo.Photo photo, Size size, PhotoPromise promise);
    static void enhanceDepth(depth_photo.Photo photo, DepthFillQuality quality, PhotoPromise promise);
    static void pasteOnPlane(depth_photo.Photo photo, depth_photo.Image image, Point topLeft, Point bottomLeft, PhotoPromise promise);
    static void computeMaskFromCoordinate(depth_photo.Photo photo, Point point, MaskImagePromise promise);
    static void computeMaskFromThreshold(depth_photo.Photo photo, double threshold, MaskImagePromise promise);
    static void depthBlend(depth_photo.Photo photo, depth_photo.Image image, Point point, long depth, Rotation rotation, double scale, PhotoPromise promise);
    static void objectSegment(depth_photo.Photo photo, Point topLeft, Point bottomRight, ImagePromise promise);
    static void refineMask(depth_photo.Image image, ImagePromise promise);
    static void initMotionEffect(depth_photo.Photo photo, Promise promise);
    static void applyMotionEffect(Motion motion, Rotation rotation, double zoom, ImagePromise promise);

    [nodoc] static EnhancedPhotography enhancedPhotographyConstructor(DOMString objectId);
  };
};
