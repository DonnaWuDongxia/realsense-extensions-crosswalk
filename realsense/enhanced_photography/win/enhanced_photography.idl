// Copyright (c) 2015 Intel Corporation. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// EnhancedPhotography API
namespace enhanced_photography {
  dictionary WorldPoint {
    double x;
    double y;
    double z;
    double confidence;
    double precision;
  };

  dictionary MeasureData {
    double     distance;
    double     confidence;
    double     precision;
    WorldPoint startPoint;
    WorldPoint endPoint;
  };

  dictionary MaskParams {
    double frontObjectDepth;
    double backObjectDepth;
    double nearFallOffDepth;
    double farFallOffDepth;
  };

  dictionary Point {
    long x;
    long y;
  };

  callback DistancePromise = void(MeasureData measureData, DOMString error);
  callback MaskImagePromise = void(depth_photo.MaskImage image, DOMString error);
  callback PhotoPromise = void(depth_photo.Photo photo, DOMString error);

  interface Functions {
    static void measureDistance(depth_photo.Photo photo, Point start, Point end, DistancePromise promise);
    static void depthRefocus(depth_photo.Photo photo, Point focus, optional double aperture, PhotoPromise promise);
    static void computeMaskFromCoordinate(depth_photo.Photo photo, Point point, optional MaskParams params, MaskImagePromise promise);
    static void computeMaskFromThreshold(depth_photo.Photo photo, double threshold, optional MaskParams params, MaskImagePromise promise);

    [nodoc] static EnhancedPhotography enhancedPhotographyConstructor(DOMString objectId);
  };
};
