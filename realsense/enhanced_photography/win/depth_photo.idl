// Copyright (c) 2015 Intel Corporation. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DepthPhoto interface
[dash_delimited_enum_string=true]
namespace depth_photo {
  enum PixelFormat {
    rgb32,
    depth,
    depth_f32,
    y8
  };

  dictionary Image {
    PixelFormat format;
    long width;
    long height;
    long[] data;
  };

  dictionary MaskImage {
    PixelFormat format;
    long width;
    long height;
    double[] data;
  };

  dictionary Photo {
    DOMString objectId;
  };

  dictionary RadialDistortion {
    double k1;
    double k2;
    double k3;
  };

  dictionary TangentialDistortion {
    double p1;
    double p2;
  };

  dictionary Point {
    double x;
    double y;
  };

  dictionary PerspectiveCameraModel {
    DOMString model;
    Point focalLength;
    Point principalPoint;
    double skew;
    RadialDistortion radialDistortion;
    TangentialDistortion tangentialDistortion;
  };

  dictionary TransitionVector {
    double x;
    double y;
    double z;
  };

  dictionary RotationQuaternion {
    double rotationAngle;
    double rotationAxisX;
    double rotationAxisY;
    double rotationAxisZ;
  };

  dictionary CameraPose {
    TransitionVector transition;
    RotationQuaternion rotation;
  };

  dictionary VendorInfo {
    DOMString model;
    DOMString manufacturer;
    DOMString notes;
  };

  callback BooleanPromise = void(boolean success, DOMString error);
  callback CameraPosePromise = void(CameraPose cameraPose, DOMString error);
  callback ImagePromise = void(Image image, DOMString error);
  callback IntPromise = void(long number, DOMString error);
  callback PerspectiveCameraModelPromise = void(PerspectiveCameraModel model, DOMString error);
  callback PhotoPromise = void(Photo photo, DOMString error);
  callback Promise = void(DOMString success, DOMString error);
  callback VendorInfoPromise = void(VendorInfo vendorInfo, DOMString error);

  interface Functions {
    static void checkSignature(BooleanPromise promise);
    static void queryCameraPerspectiveModel(long cameraIndex, PerspectiveCameraModelPromise promise);
    static void queryCameraPose(long cameraIndex, CameraPosePromise promise);
    static void queryCameraVendorInfo(long cameraIndex, VendorInfoPromise promise);
    static void queryContainerImage(ImagePromise promise);
    static void queryColorImage(optional long cameraIndex, ImagePromise promise);
    static void queryDepthImage(optional long cameraIndex, ImagePromise promise);
    static void queryDeviceVendorInfo(VendorInfoPromise promise);
    static void queryNumberOfCameras(IntPromise promise);
    static void queryRawDepthImage(ImagePromise promise);
    static void queryXDMRevision(Promise promise);
    static void resetContainerImage();
    static void setContainerImage(ArrayBuffer image);
    static void setColorImage(ArrayBuffer image);
    static void setDepthImage(ArrayBuffer image);
    static void setRawDepthImage(ArrayBuffer  image);
    static void clone(PhotoPromise promise);

    [nodoc] static DepthPhoto depthPhotoConstructor(DOMString objectId);
  };
};
